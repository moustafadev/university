//ЛАБОРАТОРНАЯ РАБОТА №13 (РАЗДЕЛ 2, ТЕМА 1) - ПРОСТЕЙШИЕ МЕТОДЫ СОРТИРОВКИ МАССИВОВ

#include <iostream>
#include <cstdlib>
#include <iomanip>

using namespace std;



//Алгоритмы сортировки , Сортировка пузырька ,Сортировка вставкамии Сортировка выбором

//Метод пузырька - это метод сортировки, который проходит через массив несколько 
//раз и на каждом проходе перемещает элементы на свои места. 
//Он хорошо подходит для сортировки небольших массивов, но для больших массивов он может быть неэффективен.

//Сортировка вставками –основанный на поиске для каждого очередного элемента подходящего места в уже обработанной последовательности
//Сортировка выбором - основанный на поиске в необработанном подмножестве наименьшего элемента


//Если у вас есть большой массив, то метод вставок, возможно, будет более эффективным, чем метод пузырька или метод выбора.


int *a = NULL; //будущий массив
int compares = 0, changes = 0; //глобальные переменные для посчета количества сравнений и пересылок
int num = 0; //размер массива (колчиество элементов)
int failure() {
    int a;
    while (!(cin >> a) || (cin.peek() != '\n'))
    {
        cin.clear();
        while (cin.get() != '\n');
        cout << "\n ОШИБКА ВВОДА. ПОВТОРИТЕ ВВОД: ";
    }
    return a;
}

//вывод состояния массива
void show(int *b) {
    cout << "\n СОСТОЯНИЕ МАССИВА: \n";
    for (int i=0; i<num; i++)
        cout << b[i] << " ";
    cout << "\n";
}

//создание копии исходного массива
int *copy_of_a() {
    int *b = new int[num];
    for (int i=0; i<num; i++)
        b[i] = a[i];
    return b;
}

//СОЗДАНИЕ МАССИВА
void Creator(){
    num = 0;
    cout << " ВВЕДИТЕ КОЛИЧЕСТВО ЭЛЕМЕНТОВ МАССИВА (НЕ БОЛЕЕ 10 000): ";
    while (num < 1 || num > 10000) {
        num = failure();
        if (num < 1 || num >10000) cout << " ВВЕДЕННО НЕДОПУСТИМОЕ ЗНАЧЕНИЕ. ПОВТОРИТЕ ВВОД: ";
    }
    if (a != NULL)  //если массив непустой (то есть выбрана команда обновления массива)
        delete [] a;
    a = new int[num];
    srand(static_cast<unsigned int>(time(0))); //инициализация генератора псевдослучайных чисел rand
    for (int i=0; i<num; i++)
        a[i] = rand() % 100;
    cout << "\n МАССИВ УСПЕШНО СОЗДАН \n";
}

//СОРТИРОВКА ОБМЕНОМ (МЕТОД ПУЗЫРЬКА)
void sorting_bubble() {
    compares = 0; changes = 0; //обнуляем счетчики количества сравнений и пересылок
    int *b = copy_of_a(); //создаем копию исходного массива
    int temp;
    cout << "\n ВЫПОЛНЯЕТСЯ СОРТИРОВКА ОБМЕНОМ (МЕТОД ПУЗЫРЬКА)...\n";
    for (int i=0; i<num; i++)
        for (int j = num-1; j > i; j--) {
            compares++;
            if (b[j-1] > b[j]) {
                temp = b[j-1];
                b[j-1] = b[j];
                b[j] = temp;
                changes++;
            }
        }
    cout << "\n СОРТИРОВКА ОБМЕНОМ ВЫПОЛНЕНА\n";
    show(b);
    cout << "\n КОЛИЧЕСТВО СРАВНЕНИЙ: "<<  compares <<", КОЛИЧЕСТВО ПЕРЕСЫЛОК: "<< changes << "\n";
    delete [] b; //после выполнения сортировки удаляем копию исходного массива (он больше не нужен)
}

//СОРТИРОВКА ВСТАВКАМИ
void sorting_inserts() {
    compares = 0; changes = 0; //обнуляем счетчики количества сравнений и пересылок
    int *b = copy_of_a(); //создаем копию исходного массива
    int temp=0, i=0, j=0;
    cout << "\n ВЫПОЛНЯЕТСЯ СОРТИРОВКА ВСТАВКАМИ\n";
    for (i = 1; i < num; i++) {
        temp = b[i];
        j = i-1;
        compares++;
        while (j > -1 && temp < b[j]) {
            b[j+1] = b[j];
            if (j != i-1) //если произошла перестановка во внутреннем цикле
                changes++;
            j--;
            compares++;
        }
        if (b[j + 1] == temp) //если перестановок не было
            changes--;
        b[j+1] = temp;
        changes++;
    }
    cout << "\n сортировка вставками выполнена\n";
    show(b);
    cout << "\n количество сравнений: "<< compares <<", количество пересылок: " << changes << "\n";
    delete [] b; //после выполнения сортировки удаляем копию исходного массива (он больше не нужен)
}

//СОРТИРОВКА ВЫБОРОМ
void sorting_choice() {
    compares = 0; changes = 0; //обнуляем счетчики количества сравнений и пересылок
    int *b = copy_of_a(); //создаем копию исходного массива
    int min = 0, i = 0, j = 0, k = 0;
    cout << "\n ВЫПОЛНЯЕТСЯ СОРТИРОВКА ВЫБОРОМ\n";
    for (i=0; i < num; i++) {
        k = i; min = b[i]; //устанавливаем начальный минимальный элемент
        for (j = i+1; j < num; j++) {
            if (b[j] < min) { //изменяем текущий минимальный элемент
                k = j; min = b[j];
            }
            compares++;
        }
        if (b[i] == min) //если перестановок не было
            changes--;
        b[k] = b[i];
        b[i] = min;
        changes++;
    }
    cout << "\n СОРТИРОВКА ВЫБОРОМ ВЫПОЛНЕНА\n";
    show(b);
    cout << "\n КОЛИЧЕСТВО СРАВНЕНИЙ: "<<  compares <<", КОЛИЧЕСТВО ПЕРЕСЫЛОК: "<< changes << "\n";
    delete [] b; //после выполнения сортировки удаляем копию исходного массива (он больше не нужен)
}

int main() {
    Creator();
    show(a);
    int n = -1;
    while (true) {
        n = -1;
        cout << " ___________________________________________________________\n\n"
        <<"выберите действие из списка\n"
        <<" 1 - выполнить сортировку обменом (метод пузырька)\n"
        <<" 2 - выполнить сортировку вставками\n"
        <<" 3 - выполнить сортировку выбором\n"
        <<" 4 - выполнить сортировку всеми тремя способами сразу\n"
        <<" 5 - обновить массив\n"
        <<" 0 - выход из программы\n"
        <<" ваш выбор: "; n = failure();
        while ((n < 0) || (n > 5)) {
            cout <<" такой команды не существует. повторите ввод: ";
            n = failure();
        }
        if (n == 1){ //1 - ВЫПОЛНИТЬ СОРТИРОВКУ ОБМЕНОМ (МЕТОД ПУЗЫРЬКА)
            show(a); sorting_bubble();}
        else if (n == 2){ //2 - ВЫПОЛНИТЬ СОРТИРОВКУ ВСТАВКАМИ
            show(a); sorting_inserts();}
        else if (n == 3){ //3 - ВЫПОЛНИТЬ СОРТИРОВКУ ВЫБОРОМ
            show(a); sorting_choice();}
        else if (n == 4) { //3 - ВЫПОЛНИТЬ СОРТИРОВКУ ВСТАВКАМИ
            show(a);
            cout << " ___________________________________________________________\n"; sorting_bubble();
            cout << " ___________________________________________________________\n"; sorting_inserts();
            cout << " ___________________________________________________________\n"; sorting_choice();
        }
        else if (n == 5) //5 - ОБНОВИТЬ МАССИВ
            Creator();
        else if (n == 0) //0 - ВЫХОД ИЗ ПРОГРАММЫ
            break;
    }
    cout << "\n УДАЛЕНИЕ МАССИВА... ОЧИСТКА ПАМЯТИ...\n";
    delete [] a;
    cout << "\n ВЫХОД ИЗ ПРОГРАММЫ...\n\n ";
    return 0;
}
